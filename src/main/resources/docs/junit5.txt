1.
Три уровня тестирования
- unit testing - тестирование маленького компонента приложения (как правило функции) в изоляции от других компонентов
- integration testing - тестирование нескольких компонентов
- acceptance testing - или функциональное тестирование всего приложения в целом (приложение как черный ящик)

jUnit5 разбит на модули
- jUnit platform - запуск тестов и интеграция с другими платформами (gradle, maven, eclipse, idea и т.д.)
- jUnit Jupiter - непосредственно разработка тестов
- jUnit Vintage - интеграция с предыдущими версиями jUnit

Требует java 8 и выше
Плагины для мавена
- maven-compiler-plugin - для какой версии компилировать тесты
- maven-surefire-plugin - запуск тестов

установка wrapper-а
https://maven.apache.org/wrapper/index.html
мавеном из идеи (правое меню maven, кнопка "m") команда
        mvn wrapper:wrapper
В терминале Idea mvnw использует Java из JAVA_HOME. Соответственно классы должны быть скомпилированы этой версией
(в настройках проекта может быть другая версия)

2. LifeCycle
@BeforeAll/@AfterAll - один раз перед вызовом тестового класса. По умолчанию
        TestInstance.Lifecycle.PER_METHOD
Это означает, что перед вызовом каждого тестового метода будет создаваться новый объект тестового класса.
Поэтому метод, помеченный @BeforeAll/@AfterAll должен быть статическим
Для изменения такого поведения класс должен быть помечен аннотацией
    @TestInstance(TestInstance.Lifecycle.PER_CLASS)